[{"content":"建立Github repository 登入Github的網頁，右上角會看到：\n點擊加號，再點擊New repository：\n出現建立的表單：\n如果是要作為主要的個人網站，Repository name建議可以使用\u0026lt;USERNAME\u0026gt;.github.io。如果你的github repo是命名成\u0026lt;USERNAME\u0026gt;.github.io的話，你的網頁就會發布在\u0026lt;USERNAME\u0026gt;.github.io；如果不是，會在\u0026lt;USERNAME\u0026gt;.github.io/\u0026lt;your_repo\u0026gt;\n勾選Public，只有付費版本可以用Private的repository來建立Github Page。其餘的選項可以自行決定。\n最後按下Create repository。\n上傳到Github repository 如果沒有使用過git，可以先參考Git 教學(1) : Git 的基本使用，完成你的git設定。\n這裡以hugo專案預設的存檔路徑./public為例。\n移動到public底下，開始用git管理這個資料夾：\ngit init 將所有檔案加入管理：\ngit add . 提交修改：\ngit commit -m \u0026quot;first commit\u0026quot; 連上自己的github repo，並且做確認：\ngit remote add origin https://github.com/\u0026lt;USERNAME\u0026gt;/\u0026lt;your_repo\u0026gt;.git git remote -v 強制把現在的branch變成main。\ngit branch -M main 然後安裝並登入GitHub Desktop（因為筆者不會設定登入認證），接著 add local repository，找到public這個資料夾。\ncommit之後就可以push到你的Github了。\n查看你的網頁 在完成上面的內容以後，打開你的repo的設定：\n在左邊的欄位中找到Pages：\n會出現綠色提示框：\n如果其他部份都設定成功，點擊提示框中的超連結，就可以看到跟hugo server產生一樣的網頁了（可能要等伺服器更新）。\n之後 如果有更動，回到專案目錄用hugo產生好網頁，接著到GitHub Desktop一樣是用commit和push就可以了。\n參考文件： Build a Personal Website With Github Pages and Hugo\ngit \u0026ndash;local-branching-on-the-cheap\nAdding an existing project to GitHub using the command line\n","permalink":"https://kkkeevvvin.github.io/posts/hugo_on_github_page/","summary":"建立Github repository 登入Github的網頁，右上角會看到：\n點擊加號，再點擊New repository：\n出現建立的表單：\n如果是要作為主要的個人網站，Repository name建議可以使用\u0026lt;USERNAME\u0026gt;.github.io。如果你的github repo是命名成\u0026lt;USERNAME\u0026gt;.github.io的話，你的網頁就會發布在\u0026lt;USERNAME\u0026gt;.github.io；如果不是，會在\u0026lt;USERNAME\u0026gt;.github.io/\u0026lt;your_repo\u0026gt;\n勾選Public，只有付費版本可以用Private的repository來建立Github Page。其餘的選項可以自行決定。\n最後按下Create repository。\n上傳到Github repository 如果沒有使用過git，可以先參考Git 教學(1) : Git 的基本使用，完成你的git設定。\n這裡以hugo專案預設的存檔路徑./public為例。\n移動到public底下，開始用git管理這個資料夾：\ngit init 將所有檔案加入管理：\ngit add . 提交修改：\ngit commit -m \u0026quot;first commit\u0026quot; 連上自己的github repo，並且做確認：\ngit remote add origin https://github.com/\u0026lt;USERNAME\u0026gt;/\u0026lt;your_repo\u0026gt;.git git remote -v 強制把現在的branch變成main。\ngit branch -M main 然後安裝並登入GitHub Desktop（因為筆者不會設定登入認證），接著 add local repository，找到public這個資料夾。\ncommit之後就可以push到你的Github了。\n查看你的網頁 在完成上面的內容以後，打開你的repo的設定：\n在左邊的欄位中找到Pages：\n會出現綠色提示框：\n如果其他部份都設定成功，點擊提示框中的超連結，就可以看到跟hugo server產生一樣的網頁了（可能要等伺服器更新）。\n之後 如果有更動，回到專案目錄用hugo產生好網頁，接著到GitHub Desktop一樣是用commit和push就可以了。\n參考文件： Build a Personal Website With Github Pages and Hugo","title":"將網頁發佈到Github Page"},{"content":"安裝Hugo 這篇以支援snap的Linux版本為例，下載擴充版本的Hugo。\nsnap install hugo --channel=extended 其他作業系統可以到 Install Hugo | Hugo 找到相應的指示安裝。\n檢查是否安裝成功：\nhugo version  若要解除安裝：\nsnap remove hugo \n開始網頁專案 確定安裝好Hugo之後，選好要存放網頁專案的目錄，用指令\n hugo new site mywebsite -f yml  mywebsite可以替換成其他你想要的名字。 -f yml指定使用yml格式，因為yml/yaml的格式比起toml更容易閱讀，根據Papermod的作者adityatelange的說法，所以以下也將採用yml的格式。如果有需要，你可以很容易的找到YML to TOML的轉換器。   可以看到hugo幫你建立好的檔案架構如下。\nmywebsite/ ├── archetypes │ └── default.md ├── config.yml ├── content ├── data ├── layouts ├── static └── themes 選擇主題 我選擇的主題是PaperMod，因為這個主題裡面有很不錯的指引，也有舒服的版面設計。\n移動到mywebsite底下執行以下指令，把PaperMod的資料複製到mywebsite/themes/PaperMod。\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 接著打開mywebsite/config.yml在最後加入\ntheme: \u0026quot;PaperMod\u0026quot; \n新增文章 hugo new posts/my-first-post.md 新增的文章會出現在mywebsite/content/posts/之下。你可以試著更動my-first-post.md，一開始會長這樣：\n--- title: \u0026quot;My First Post\u0026quot; date: 2019-03-26T08:47:11+01:00 draft: true ---  這篇文章如果是草稿就不會發布；如果你想要發布，把它改成draft: false。\n 文章的內容寫在下面的---下面，語法可以參考Basic Syntax | Markdown Guide。\n在本機端預覽 在本機開啟一個網頁伺服器：\n hugo server  在最後加上-D，可以預覽草稿   用瀏覽器開啟http://localhost:1313/，就可以看到網頁的樣子了。可以放心的更動網頁的內容，只要重新整理網頁，可以馬上看到結果。（可能需要強置重新整理瀏覽器，像是用快捷鍵 Ctrl-R，或者是清除快取。）\n產生靜態網頁 Hugo就是用指令hugo來產生網頁的：\nhugo 預設的生成結果會在mywebsite/public/，可以用-d來指定路徑，或是在設定檔config.yml中設定publishdir。\n如果要連同草稿一起產生，加上-D。\n使用hugo help知道更多詳細的參數。\n參考文件 Quick Start | Hugo\nInstallation | PaperMod\nBuild a Personal Website With Github Pages and Hugo\n","permalink":"https://kkkeevvvin.github.io/posts/hugo_from_scratch/","summary":"安裝Hugo 這篇以支援snap的Linux版本為例，下載擴充版本的Hugo。\nsnap install hugo --channel=extended 其他作業系統可以到 Install Hugo | Hugo 找到相應的指示安裝。\n檢查是否安裝成功：\nhugo version  若要解除安裝：\nsnap remove hugo \n開始網頁專案 確定安裝好Hugo之後，選好要存放網頁專案的目錄，用指令\n hugo new site mywebsite -f yml  mywebsite可以替換成其他你想要的名字。 -f yml指定使用yml格式，因為yml/yaml的格式比起toml更容易閱讀，根據Papermod的作者adityatelange的說法，所以以下也將採用yml的格式。如果有需要，你可以很容易的找到YML to TOML的轉換器。   可以看到hugo幫你建立好的檔案架構如下。\nmywebsite/ ├── archetypes │ └── default.md ├── config.yml ├── content ├── data ├── layouts ├── static └── themes 選擇主題 我選擇的主題是PaperMod，因為這個主題裡面有很不錯的指引，也有舒服的版面設計。\n移動到mywebsite底下執行以下指令，把PaperMod的資料複製到mywebsite/themes/PaperMod。\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 接著打開mywebsite/config.yml在最後加入\ntheme: \u0026quot;PaperMod\u0026quot; \n新增文章 hugo new posts/my-first-post.","title":"用Hugo製作網頁"}]