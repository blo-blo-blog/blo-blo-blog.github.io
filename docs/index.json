[{"content":"簡介 這是一個純文字的地牢遊戲，他的呈現方式非常有趣，是用目錄和文件來代表房間和提示，遊玩的方式是用Bash的指令，很適合Bash的初學者玩，在遊戲的過程中，還可以學習到不同的指令使用方式。\n安裝 在開始之前，我們的電腦之中必須有Bash或Zsh。Linux, BSD和MacOS這些作業系統預設都包含Bash。Windows的使用者可以先安裝Cygwin或WSL，也可以嘗試使用Linux。\n到官網或是點擊這裡下載並且解壓縮。\n開始遊戲 首先，用終端機開啟bashcrawl的目錄，輸入指令ls，會出現當前目錄下的檔案：\nblobloblog@mylaptop:~/Downloads/bashcrawl-master$ ls entrance LICENSE README.md 有一檔案寫著README.md，使用指令cat將他所有的內容輸出在終端機中：\ncat README.md 或是使用less，可以用方向鍵瀏覽文件內容，按下q離開：\nless README.md 仔細閱讀README.md，然後使用以下指令開始遊戲：\ncd entrance/ 祝大家玩的愉快 ଘ(੭ˊᵕˋ)੭* ੈ✩\n參考文件 https://marlborough-college.gitbook.io/attic-lab/the-terminal/games/level-1-bashcrawl\n","permalink":"https://blo-blo-blog.github.io/posts/bashcrawl/","summary":"簡介 這是一個純文字的地牢遊戲，他的呈現方式非常有趣，是用目錄和文件來代表房間和提示，遊玩的方式是用Bash的指令，很適合Bash的初學者玩，在遊戲的過程中，還可以學習到不同的指令使用方式。\n安裝 在開始之前，我們的電腦之中必須有Bash或Zsh。Linux, BSD和MacOS這些作業系統預設都包含Bash。Windows的使用者可以先安裝Cygwin或WSL，也可以嘗試使用Linux。\n到官網或是點擊這裡下載並且解壓縮。\n開始遊戲 首先，用終端機開啟bashcrawl的目錄，輸入指令ls，會出現當前目錄下的檔案：\nblobloblog@mylaptop:~/Downloads/bashcrawl-master$ ls entrance LICENSE README.md 有一檔案寫著README.md，使用指令cat將他所有的內容輸出在終端機中：\ncat README.md 或是使用less，可以用方向鍵瀏覽文件內容，按下q離開：\nless README.md 仔細閱讀README.md，然後使用以下指令開始遊戲：\ncd entrance/ 祝大家玩的愉快 ଘ(੭ˊᵕˋ)੭* ੈ✩\n參考文件 https://marlborough-college.gitbook.io/attic-lab/the-terminal/games/level-1-bashcrawl","title":"[遊戲] Bashcrawl介紹"},{"content":"什麼是RSS? 下面這個好和弦的影片裡有詳細的介紹。\n  4:24 開始介紹Newsboat\n安裝Newsboat 如果有安裝snap，可以直接使用\nsudo snap install newsboat 進入程式之後可以按快捷鍵?，查看快捷鍵提示，也可以看#我的Newsboat設定自訂快捷鍵。\nDistrotube深入解析Newsboat RSS Reader 因為筆者特別喜歡Newsboat的簡潔版面和方便的鍵盤操作，所以另外又找到這個影片，對Newsboat有更進一步的了解。\n  var tag = document.createElement('script'); tag.src = \"https://www.youtube.com/player_api\"; var firstScriptTag = document.getElementsByTagName('script')[0]; firstScriptTag.parentNode.insertBefore(tag, firstScriptTag); var player; function onYouTubePlayerAPIReady() { ytplayer = new YT.Player('ytplayer', { videoId: \"CJXdQTGm1jg\", }); console.log(ytplayer); } function playerSeekTo(player, seconds) { player.seekTo(seconds); }  1:46\n如何編輯 urls\n4:06\n 以下都需要用空格隔開 自訂標題：在網址的後面加上 \u0026ldquo;~\u0026lt;YOUR_CUSTOM_TITLE\u0026gt;\u0026rdquo; 標籤：不需要雙引號，直接輸入你的標籤 註解： \u0026ldquo;!\u0026lt;YOUR_COMMENT\u0026gt;\u0026rdquo;  5:22\nyoutube channel rss feed\n https://www.youtube.com/feeds/videos.xml?channel_id= https://www.youtube.com/feeds/videos.xml?playlist_id=  7:55\n用comment做分類\n9:33\n更多rss\ngitlab github 在網址後面加上.atom\nsourceforge 在網址後加上/feed\n我的Newsboat設定 因為我是用snap下載，所以我的設定路徑是在~snap/newsboat/4780/.newsboat/config，以下是設定檔的內容：\n# Ubuntu好像只能這樣設定，會用預設的瀏覽器打開 browser \u0026quot;xdg-open\u0026quot; 可以參考這個。\n找到網站或Podcast的RSS連結 大部分有提供RSS的部落格，都會有一個類似wifi的圖示，那個就是他的RSS連結。如果沒有可以嘗試檢視網頁原始碼，搜尋rss、atom、xml或是url，有很大的機率可以找到。\nPodcast都會用RSS做推播，所以理論上都可以找到各個Podcast的RSS連結。可以用同樣的方法找到RSS連結，但是筆者在Spotify上嘗試過卻找不到。\nPtt看板的RSS連結 https://www.ptt.cc/atom/\u0026lt;BROAD_NAME\u0026gt;.xml Hugo網站的RSS Hugo的RSS模板在layouts/_default/rss.xml。\n產生出來的RSS連結會在https://\u0026lt;WEBSITE_URLS\u0026gt;/index.xml。\n記得把我的部落格加到你的RSS閱讀器喔～\n","permalink":"https://blo-blo-blog.github.io/posts/rss_newsboat_hugo/","summary":"什麼是RSS? 下面這個好和弦的影片裡有詳細的介紹。\n  4:24 開始介紹Newsboat\n安裝Newsboat 如果有安裝snap，可以直接使用\nsudo snap install newsboat 進入程式之後可以按快捷鍵?，查看快捷鍵提示，也可以看#我的Newsboat設定自訂快捷鍵。\nDistrotube深入解析Newsboat RSS Reader 因為筆者特別喜歡Newsboat的簡潔版面和方便的鍵盤操作，所以另外又找到這個影片，對Newsboat有更進一步的了解。\n  var tag = document.createElement('script'); tag.src = \"https://www.youtube.com/player_api\"; var firstScriptTag = document.getElementsByTagName('script')[0]; firstScriptTag.parentNode.insertBefore(tag, firstScriptTag); var player; function onYouTubePlayerAPIReady() { ytplayer = new YT.Player('ytplayer', { videoId: \"CJXdQTGm1jg\", }); console.log(ytplayer); } function playerSeekTo(player, seconds) { player.seekTo(seconds); }  1:46\n如何編輯 urls\n4:06\n 以下都需要用空格隔開 自訂標題：在網址的後面加上 \u0026ldquo;~\u0026lt;YOUR_CUSTOM_TITLE\u0026gt;\u0026rdquo; 標籤：不需要雙引號，直接輸入你的標籤 註解： \u0026ldquo;!\u0026lt;YOUR_COMMENT\u0026gt;\u0026rdquo;  5:22\nyoutube channel rss feed","title":"RSS簡介與Newsboat的使用"},{"content":"首先可以參考Google Analytics GA是什麼？。\n取得「評估ID」之後，在 config.yml 中加上：\ngoogleAnalytics: \u0026lt;YOUR_TRACKING_ID\u0026gt; 並且在 params 下面加上：\nenv: production 接著去點點看你的網站，如果成功的話可以在GA的頁面，看到活動紀錄。\n","permalink":"https://blo-blo-blog.github.io/posts/hugo_ga/","summary":"首先可以參考Google Analytics GA是什麼？。\n取得「評估ID」之後，在 config.yml 中加上：\ngoogleAnalytics: \u0026lt;YOUR_TRACKING_ID\u0026gt; 並且在 params 下面加上：\nenv: production 接著去點點看你的網站，如果成功的話可以在GA的頁面，看到活動紀錄。","title":"在網站中加入Google Analytics"},{"content":"不知道什麼是Likecoin的人可以先去看看這篇文章。\n這篇文章主要是參考Hugo 安裝 LikeCoin 教學 | WANcatServer。\nHugo 可以使用自訂 Layout 的方式，在不改變主題的情況下改變網站設計，我們可以透過這個方式在每個文章下放置 LikeButton。\n為了覆寫文章輸出的模板，將 theme 的 layouts 資料夾複製到專案目錄下。\ncp -r theme/\u0026lt;YOUR_THEME\u0026gt;/layouts/ . Hugo 中的 Partial 功能，可以讓你建立小模板，嵌入在頁面中。參考文件。\n在 layouts 的 partials 資料夾建立 likecoin.html，寫入以下內容。你也可以在這裡加上想給讀者看的說明文字（HTML格式）。\n\u0026lt;iframe class=\u0026quot;LikeCoin\u0026quot; height=\u0026quot;235\u0026quot; src=\u0026quot;https://button.like.co/in/embed/{{ .Site.Params.likerID }}/button?referrer={{ .Permalink }}\u0026quot; width=\u0026quot;100%\u0026quot; frameborder=0\u0026gt;\u0026lt;/iframe\u0026gt; 接下來在 config.yml 的params後面加入\nlikerID = \u0026quot;\u0026lt;your liker id\u0026gt;\u0026quot; 接著編輯文章使用的模板，通常是 _default/single.html。這就是一個 Go Template，在你想要的地方插入：\n{{ partial \u0026quot;likecoin.html\u0026quot; . }} 建議插在 {{ .Content }} 後面，Like Button 就會接在文章後面。\nGo Template裡面有很多花括號，讓人眼花撩亂，我使用的主題在 {{ .Content }} 附近的程式碼如下：\n \u0026lt;div class=\u0026quot;post-content\u0026quot;\u0026gt; {{- if not (.Param \u0026quot;disableAnchoredHeadings\u0026quot;) }} {{- partial \u0026quot;anchored_headings.html\u0026quot; .Content -}} {{- else }}{{ .Content }}{{ end }} \u0026lt;!-- likecoin below --\u0026gt; {{ partial \u0026quot;likecoin.html\u0026quot; . }} \u0026lt;/div\u0026gt; 如果把上述那段程式碼緊接著插入在 {{ .Content }}後，會造成LikeButton有時候不會出現。Go語言的程式邏輯和大多數的程式語言都一樣，在插入時要看清楚附近的程式碼。\n這樣 Hugo 就會將 likecoin 這個 partial render 到你的文章中了。記得加上 “.\u0026quot;，沒有的話，likecoin 的模板讀不到資料。整個過程都不需要動到 theme 的原始程式。\n最後，執行 hugo server 預覽你的網站。\n 本著作係採用創用 CC 姓名標示-相同方式分享 3.0 台灣 授權條款授權.\n","permalink":"https://blo-blo-blog.github.io/posts/hugo_likebutton/","summary":"不知道什麼是Likecoin的人可以先去看看這篇文章。\n這篇文章主要是參考Hugo 安裝 LikeCoin 教學 | WANcatServer。\nHugo 可以使用自訂 Layout 的方式，在不改變主題的情況下改變網站設計，我們可以透過這個方式在每個文章下放置 LikeButton。\n為了覆寫文章輸出的模板，將 theme 的 layouts 資料夾複製到專案目錄下。\ncp -r theme/\u0026lt;YOUR_THEME\u0026gt;/layouts/ . Hugo 中的 Partial 功能，可以讓你建立小模板，嵌入在頁面中。參考文件。\n在 layouts 的 partials 資料夾建立 likecoin.html，寫入以下內容。你也可以在這裡加上想給讀者看的說明文字（HTML格式）。\n\u0026lt;iframe class=\u0026quot;LikeCoin\u0026quot; height=\u0026quot;235\u0026quot; src=\u0026quot;https://button.like.co/in/embed/{{ .Site.Params.likerID }}/button?referrer={{ .Permalink }}\u0026quot; width=\u0026quot;100%\u0026quot; frameborder=0\u0026gt;\u0026lt;/iframe\u0026gt; 接下來在 config.yml 的params後面加入\nlikerID = \u0026quot;\u0026lt;your liker id\u0026gt;\u0026quot; 接著編輯文章使用的模板，通常是 _default/single.html。這就是一個 Go Template，在你想要的地方插入：\n{{ partial \u0026quot;likecoin.html\u0026quot; . }} 建議插在 {{ .Content }} 後面，Like Button 就會接在文章後面。\nGo Template裡面有很多花括號，讓人眼花撩亂，我使用的主題在 {{ .Content }} 附近的程式碼如下：","title":"在網站中加入LikeButton"},{"content":"建立Github repository 登入Github的網頁，右上角會看到：\n點擊加號，再點擊New repository：\n出現建立的表單：\n如果是要作為主要的個人網站，Repository name建議可以使用\u0026lt;USERNAME\u0026gt;.github.io。如果你的github repo是命名成\u0026lt;USERNAME\u0026gt;.github.io的話，你的網頁就會發布在\u0026lt;USERNAME\u0026gt;.github.io；如果不是，會在\u0026lt;USERNAME\u0026gt;.github.io/\u0026lt;your_repo\u0026gt;\n勾選Public，只有付費版本可以用Private的repository來建立Github Page。其餘的選項可以自行決定。\n最後按下Create repository。\n上傳到Github repository 如果沒有使用過git，可以先參考Git 教學(1) : Git 的基本使用，完成你的git設定。\n這裡以hugo專案預設的存檔路徑./public為例。\n移動到public底下，開始用git管理這個資料夾：\ngit init 將所有檔案加入管理：\ngit add . 提交修改：\ngit commit -m \u0026quot;first commit\u0026quot; 連上自己的github repo，並且做確認：\ngit remote add origin https://github.com/\u0026lt;USERNAME\u0026gt;/\u0026lt;your_repo\u0026gt;.git git remote -v 強制把現在的branch變成main。\ngit branch -M main 然後安裝並登入GitHub Desktop（因為筆者不會設定登入認證），接著 add local repository，找到public這個資料夾。\ncommit之後就可以push到你的Github了。\n查看你的網頁 在完成上面的內容以後，打開你的repo的設定：\n在左邊的欄位中找到Pages：\n會出現綠色提示框：\n如果其他部份都設定成功，點擊提示框中的超連結，就可以看到跟hugo server產生一樣的網頁了（可能要等伺服器更新）。\n之後 如果有更動，回到專案目錄用hugo產生好網頁，接著到GitHub Desktop一樣是用commit和push就可以了。\n參考文件： Build a Personal Website With Github Pages and Hugo\ngit \u0026ndash;local-branching-on-the-cheap\nAdding an existing project to GitHub using the command line\n","permalink":"https://blo-blo-blog.github.io/posts/hugo_on_github_page/","summary":"建立Github repository 登入Github的網頁，右上角會看到：\n點擊加號，再點擊New repository：\n出現建立的表單：\n如果是要作為主要的個人網站，Repository name建議可以使用\u0026lt;USERNAME\u0026gt;.github.io。如果你的github repo是命名成\u0026lt;USERNAME\u0026gt;.github.io的話，你的網頁就會發布在\u0026lt;USERNAME\u0026gt;.github.io；如果不是，會在\u0026lt;USERNAME\u0026gt;.github.io/\u0026lt;your_repo\u0026gt;\n勾選Public，只有付費版本可以用Private的repository來建立Github Page。其餘的選項可以自行決定。\n最後按下Create repository。\n上傳到Github repository 如果沒有使用過git，可以先參考Git 教學(1) : Git 的基本使用，完成你的git設定。\n這裡以hugo專案預設的存檔路徑./public為例。\n移動到public底下，開始用git管理這個資料夾：\ngit init 將所有檔案加入管理：\ngit add . 提交修改：\ngit commit -m \u0026quot;first commit\u0026quot; 連上自己的github repo，並且做確認：\ngit remote add origin https://github.com/\u0026lt;USERNAME\u0026gt;/\u0026lt;your_repo\u0026gt;.git git remote -v 強制把現在的branch變成main。\ngit branch -M main 然後安裝並登入GitHub Desktop（因為筆者不會設定登入認證），接著 add local repository，找到public這個資料夾。\ncommit之後就可以push到你的Github了。\n查看你的網頁 在完成上面的內容以後，打開你的repo的設定：\n在左邊的欄位中找到Pages：\n會出現綠色提示框：\n如果其他部份都設定成功，點擊提示框中的超連結，就可以看到跟hugo server產生一樣的網頁了（可能要等伺服器更新）。\n之後 如果有更動，回到專案目錄用hugo產生好網頁，接著到GitHub Desktop一樣是用commit和push就可以了。\n參考文件： Build a Personal Website With Github Pages and Hugo","title":"將網頁發佈到Github Page"},{"content":"安裝Hugo 這篇以支援snap的Linux版本為例，下載擴充版本的Hugo。\nsnap install hugo --channel=extended 其他作業系統可以到 Install Hugo | Hugo 找到相應的指示安裝。\n檢查是否安裝成功：\nhugo version  若要解除安裝：\nsnap remove hugo \n開始網頁專案 確定安裝好Hugo之後，選好要存放網頁專案的目錄，用指令\n hugo new site mywebsite -f yml  mywebsite可以替換成其他你想要的名字。 -f yml指定使用yml格式，因為yml/yaml的格式比起toml更容易閱讀，根據Papermod的作者adityatelange的說法，所以以下也將採用yml的格式。如果有需要，你可以很容易的找到YML to TOML的轉換器。   可以看到hugo幫你建立好的檔案架構如下。\nmywebsite/ ├── archetypes │ └── default.md ├── config.yml ├── content ├── data ├── layouts ├── static └── themes 選擇主題 我選擇的主題是PaperMod，因為這個主題裡面有很不錯的指引，也有舒服的版面設計。\n移動到mywebsite底下執行以下指令，把PaperMod的資料複製到mywebsite/themes/PaperMod。\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 接著打開mywebsite/config.yml在最後加入\ntheme: \u0026quot;PaperMod\u0026quot; \n新增文章 hugo new posts/my-first-post.md 新增的文章會出現在mywebsite/content/posts/之下。你可以試著更動my-first-post.md，一開始會長這樣：\n--- title: \u0026quot;My First Post\u0026quot; date: 2019-03-26T08:47:11+01:00 draft: true ---  這篇文章如果是草稿就不會發布；如果你想要發布，把它改成draft: false。\n 文章的內容寫在下面的---下面，語法可以參考Basic Syntax | Markdown Guide。\n在本機端預覽 在本機開啟一個網頁伺服器：\n hugo server  在最後加上-D，可以預覽草稿   用瀏覽器開啟http://localhost:1313/，就可以看到網頁的樣子了。可以放心的更動網頁的內容，只要重新整理網頁，可以馬上看到結果。（可能需要強置重新整理瀏覽器，像是用快捷鍵 Ctrl-R，或者是清除快取。）\n產生靜態網頁 Hugo就是用指令hugo來產生網頁的：\nhugo 預設的生成結果會在mywebsite/public/，可以用-d來指定路徑，或是在設定檔config.yml中設定publishdir。\n如果要連同草稿一起產生，加上-D。\n使用hugo help知道更多詳細的參數。\n參考文件 Quick Start | Hugo\nInstallation | PaperMod\nBuild a Personal Website With Github Pages and Hugo\n","permalink":"https://blo-blo-blog.github.io/posts/hugo_from_scratch/","summary":"安裝Hugo 這篇以支援snap的Linux版本為例，下載擴充版本的Hugo。\nsnap install hugo --channel=extended 其他作業系統可以到 Install Hugo | Hugo 找到相應的指示安裝。\n檢查是否安裝成功：\nhugo version  若要解除安裝：\nsnap remove hugo \n開始網頁專案 確定安裝好Hugo之後，選好要存放網頁專案的目錄，用指令\n hugo new site mywebsite -f yml  mywebsite可以替換成其他你想要的名字。 -f yml指定使用yml格式，因為yml/yaml的格式比起toml更容易閱讀，根據Papermod的作者adityatelange的說法，所以以下也將採用yml的格式。如果有需要，你可以很容易的找到YML to TOML的轉換器。   可以看到hugo幫你建立好的檔案架構如下。\nmywebsite/ ├── archetypes │ └── default.md ├── config.yml ├── content ├── data ├── layouts ├── static └── themes 選擇主題 我選擇的主題是PaperMod，因為這個主題裡面有很不錯的指引，也有舒服的版面設計。\n移動到mywebsite底下執行以下指令，把PaperMod的資料複製到mywebsite/themes/PaperMod。\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 接著打開mywebsite/config.yml在最後加入\ntheme: \u0026quot;PaperMod\u0026quot; \n新增文章 hugo new posts/my-first-post.","title":"用Hugo製作網頁"}]